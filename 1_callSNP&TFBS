## Call SNP
#need tools /samtools/
1. merge .bam files (samtools merge)
2. samtools0.1.18 mpileup -uf  reference.fa input.bam | bcftools0.1.17 view -Nvcg - > SNP.vcf
3. filter SNP
grep "0/1:" 3_NA_SNP.vcf > 3_NA_SNP_hete.vcf
vcffilter -f "DP > 10 & MQ > 20" .vcf >filtered.vcf
grep -v "INDEL" wgEncodeUwDgfK562Znfa41c6Aln.vcf > UWDGF_noindel.vcf

#extract SNP
setwd("/media/b/xsw/atac_1201/")
snp<-read.table("DP10MQ20_hete_non-indel.SNP.vcf",header=F,stringsAsFactors = FALSE)
snp[,c(1,2,2,4,5)]->a    #fiter the SNP with two allele
colnames(a) <- c(chr,sta,end,ref,alt)
write.table(a,"ALL_hete_SNP.bed",quote=FALSE,row.names=FALSE,col.names=F)

## Call TFBS
#######################################################################################
########1. Peak identification
#need package /GenomicRanges/
#######################################################################################
setwd("")
peak1<-read.table(".narrowPeak",header=FALSE,stringsAsFactors = FALSE)
peak1[which(peak1[,5]>200),c(1,2,3)]->peak1_200
write.table(peak1_200,".bed",quote=FALSE,row.names=FALSE,col.names=FALSE)
peak2<-read.table(".narrowPeak",header=FALSE,stringsAsFactors = FALSE)
peak2[which(peak2[,5]>200),c(1,2,3)]->peak2_200
write.table(peak2_200,".bed",quote=FALSE,row.names=FALSE,col.names=FALSE)
peak3<-read.table(".narrowPeak",header=FALSE,stringsAsFactors = FALSE)
peak3[which(peak3[,5]>200),c(1,2,3)]->peak3_200
write.table(peak3_200,".bed",quote=FALSE,row.names=FALSE,col.names=FALSE)
peak4<-read.table(".narrowPeak",header=FALSE,stringsAsFactors = FALSE)
peak4[which(peak4[,5]>200),c(1,2,3)]->peak4_200
write.table(peak4_200,".bed",quote=FALSE,row.names=FALSE,col.names=FALSE)
peak5<-read.table(".narrowPeak",header=FALSE,stringsAsFactors = FALSE)
peak5[which(peak5[,5]>200),c(1,2,3)]->peak5_200
write.table(peak5_200,".bed",quote=FALSE,row.names=FALSE,col.names=FALSE)
peak6<-read.table(".narrowPeak",header=FALSE,stringsAsFactors = FALSE)
peak6[which(peak6[,5]>200),c(1,2,3)]->peak6_200
write.table(peak6_200,".bed",quote=FALSE,row.names=FALSE,col.names=FALSE)

library("GenomicRanges") 
colnames(peak1_200)<-c("chr","start","end"); colnames(peak2_200)<-c("chr","start","end");
colnames(peak3_200)<-c("chr","start","end"); colnames(peak4_200)<-c("chr","start","end");
colnames(peak5_200)<-c("chr","start","end"); colnames(peak6_200)<-c("chr","start","end");
p1Range<-with(peak1_200,GRanges(seqnames=chr,ranges=IRanges(start=start,end=end),strand="*"));
p2Range<-with(peak2_200,GRanges(seqnames=chr,ranges=IRanges(start=start,end=end),strand="*"));
p3Range<-with(peak3_200,GRanges(seqnames=chr,ranges=IRanges(start=start,end=end),strand="*"));
p4Range<-with(peak4_200,GRanges(seqnames=chr,ranges=IRanges(start=start,end=end),strand="*"));
p5Range<-with(peak5_200,GRanges(seqnames=chr,ranges=IRanges(start=start,end=end),strand="*"));
p6Range<-with(peak6_200,GRanges(seqnames=chr,ranges=IRanges(start=start,end=end),strand="*"));
union(p1Range,p2Range)->NA_union; union(p3Range,p4Range)->LPS_union; union(p5Range,p6Range)->PDGF_union;
Reduce(intersect,list(p1Range,p2Range,p3Range,p4Range,p5Range,p6Range,p7Range,p8Range,p9Range))->intersection
as.data.frame(intersection)->intersection
intersection[,1:3]->peak
write.table(peak,"peak_intersect.bed",quote=FALSE,row.names=FALSE,col.names=T)

#########################################################################################
########2. Predict TF binding sites within open chromatin regions
#need R.package /BSgenome/
#need tool /FIMO/ 
#########################################################################################
library('BSgenome')
#source("http://bioconductor.org/biocLite.R")
#biocLite("BSgenome.Mmusculus.UCSC.mm10")
library("BSgenome.Hsapiens.UCSC.hg19")
as.character(getSeq(BSgenome.Hsapiens.UCSC.hg19, peak$seqnames, start = peak$start, end = peak$end, strand = "+"))->peak_seq
for(i in 1:nrow(peak)){
  cat(">", as.character(peak[i,1]), file = "fasta.txt", sep = "", append = TRUE)
  cat("-", file = "fasta.txt", append = TRUE)
  cat(as.character(peak[i,2]),"-",as.character(peak[i,3]),file = "fasta.txt", sep = "", append = TRUE)
  cat("\n", file = "fasta.txt", append = TRUE)
  cat(peak_seq[i], file = "fasta.txt", sep = "", append = TRUE)
  cat("\n", file = "fasta.txt", append = TRUE)
}
# fimo /home/xsw/data/fimo/JASPAR_CORE_2016.meme /media/b/xsw/ATAC_mouse/peak_file/fastaHI.txt --o /media/b/xsw/ATAC_mouse/fimo_out_HI

#shift TFBS 1bp 
setwd("/media/b/xsw/atac_1201/fimo/fimo_out")
fimo<-read.delim("fimo.txt",header=TRUE)
fenkai<-function(x){
  a<-c()
  x[1]->a[1]
  as.character(strsplit(as.character(x[2]), split = "-", fixed = TRUE)[[1]][1])->a[2]
  as.numeric(strsplit(as.character(x[2]), split = "-", fixed = TRUE)[[1]][2])+as.numeric(x[3]) - 1 -> a[3] 
  as.numeric(strsplit(as.character(x[2]), split = "-", fixed = TRUE)[[1]][2])+as.numeric(x[4]) - 1 -> a[4]
  x[5]->a[5];x[6]->a[6];x[7]->a[7];x[8]->a[8];x[9]->a[9]
  return(a)
}
t(apply(fimo,1,fenkai))->aa
write.table(aa,"ALL_TFBS_shifted.txt",quote=FALSE,row.names=FALSE,col.names=F)

